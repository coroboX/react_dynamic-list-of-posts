{"version":3,"sources":["api.tsx","components/User.tsx","App.tsx","index.tsx"],"names":["loadData","a","Promise","all","fetch","then","response","ok","json","Error","statusText","catch","error","console","message","loadedData","User","props","name","email","address","street","city","zipcode","Alert","variant","AlertTitle","className","initState","setLoading","setLoaded","gotError","comments","users","posts","preparedPosts","filteredPosts","App","state","onLoading","setState","prevState","log","this","map","user","Button","color","type","onClick","disabled","React","Component","ReactDOM","render","document","getElementById"],"mappings":"8UAyDO,IAAMA,EAAQ,uCAAG,4BAAAC,EAAA,sEACGC,QAAQC,IAAI,CAnD9BC,MALS,6EAMbC,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAGlB,MAAM,IAAIC,MAAJ,+CAAkDH,EAASI,gBAElEC,OAAM,SAAAC,GAIL,MAFAC,QAAQD,MAAMA,EAAME,SAEd,IAAIL,MAAM,oDAsBbL,MAtCS,6EAuCbC,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAGlB,MAAM,IAAIC,MAAJ,8CAAiDH,EAASI,gBAEjEC,OAAM,SAAAC,GAIL,MAFAC,QAAQD,MAAMA,EAAME,SAEd,IAAIL,MAAM,gDA7BbL,MApBY,gFAqBhBC,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAGlB,MAAM,IAAIC,MAAJ,kDAAqDH,EAASI,gBAErEC,OAAM,SAAAC,GAIL,MAFAC,QAAQD,MAAMA,EAAME,SAEd,IAAIL,MAAM,qDAqBE,cAChBM,EADgB,yBAOfA,GAPe,2CAAH,qD,gBC7CRC,EAAwB,SAACC,GAAW,IACvCC,EAAyBD,EAAzBC,KAAMC,EAAmBF,EAAnBE,MAAOC,EAAYH,EAAZG,QACbC,EAA0BD,EAA1BC,OAAQC,EAAkBF,EAAlBE,KAAMC,EAAYH,EAAZG,QAEtB,OACE,kBAACC,EAAA,EAAD,CAAOC,QAAQ,YACb,kBAACC,EAAA,EAAD,KACE,2BAAIR,IAEN,uBAAGS,UAAU,SAASR,GACtB,6BACA,2BAAIE,GACJ,2BAAIC,GACJ,2BAAIC,KCLJK,EAAmB,CACvBC,YAAY,EACZC,WAAW,EACXC,UAAU,EACVnB,MAAO,GACPoB,SAAU,GACVC,MAAO,GACPC,MAAO,GACPC,cAAe,GACfC,cAAe,IAsGFC,EAnGf,4MACEC,MAAQV,EADV,EAGEW,UAAY,WACV,EAAKC,UAAS,SAACC,GAAD,mBAAC,eACVA,GADS,IAEZZ,YAAY,OAGd7B,IACGK,MAAK,YAA+B,IAAD,mBAA5B4B,EAA4B,KAArBC,EAAqB,KAAdF,EAAc,KAClC,EAAKQ,UAAS,SAACC,GAAD,mBAAC,eACVA,GADS,IAEZZ,YAAY,EACZC,WAAW,EACXlB,MAAO,GACPmB,UAAU,EACVE,QACAD,WACAE,QACAC,cAAe,GACfC,cAAe,QAGjBvB,QAAQ6B,IAAIT,GACZpB,QAAQ6B,IAAIR,GACZrB,QAAQ6B,IAAIV,MAEbrB,OAAM,SAAAC,GACL,EAAK4B,UAAS,SAAAC,GAAS,kCAClBA,GADkB,IAErB7B,MAAOA,EAAME,QACbiB,UAAU,WAhCpB,uDAqCY,IAAD,EAOHY,KAAKL,MALPT,EAFK,EAELA,WACAC,EAHK,EAGLA,UACAG,EAJK,EAILA,MACAF,EALK,EAKLA,SACAnB,EANK,EAMLA,MAGF,OACE,oCACE,qDAEIkB,EA6BE,iEAGE,4BACGG,EAAMW,KAAI,SAACC,GAAD,OACT,kBAAC,EAAD,CACE3B,KAAM2B,EAAK3B,KACXC,MAAO0B,EAAK1B,MACZC,QAASyB,EAAKzB,eAnCtB,oCACE,kBAAC0B,EAAA,EAAD,CACErB,QAAQ,YACRsB,MAAM,UACNC,KAAK,SACLC,QAASN,KAAKJ,UACdW,SAAUrB,GAETA,EAAa,aAAe,SAEjB,IAAbE,GAEC,2BACGnB,EACA,IACD,kBAACkC,EAAA,EAAD,CACErB,QAAQ,WACRsB,MAAM,UACNC,KAAK,SACLC,QAASN,KAAKJ,WAJhB,wBAnEpB,GAAyBY,IAAMC,WC3B/BC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.b886b023.chunk.js","sourcesContent":["import { UserType, PostType, CommentType } from './types';\n\nconst URL_USERS = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/users.json';\nconst URL_POSTS = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/posts.json';\nconst URL_COMMENTS = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/comments.json';\n\nfunction loadUsers(): Promise<UserType[]> {\n  return fetch(URL_USERS)\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Response of Users API not successful ${response.statusText}`);\n    })\n    .catch(error => {\n      // eslint-disable-next-line no-console\n      console.error(error.message);\n\n      throw new Error('Failed to Fetch UsersType, press button again');\n    });\n}\n\nfunction loadComments(): Promise<CommentType[]> {\n  return fetch(URL_COMMENTS)\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Response of Comments API not successful ${response.statusText}`);\n    })\n    .catch(error => {\n      // eslint-disable-next-line no-console\n      console.error(error.message);\n\n      throw new Error('Failed to Fetch Comments, press button again');\n    });\n}\n\nfunction loadPosts(): Promise<PostType[]> {\n  return fetch(URL_POSTS)\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`Response of Posts API ot successful ${response.statusText}`);\n    })\n    .catch(error => {\n      // eslint-disable-next-line no-console\n      console.error(error.message);\n\n      throw new Error('Failed to Fetch Posts, press button again');\n    });\n}\n\nexport const loadData = async (): Promise<[UserType[], PostType[], CommentType[]]> => {\n  const loadedData = await Promise.all([\n    loadUsers(),\n    loadPosts(),\n    loadComments(),\n  ]);\n\n  return loadedData;\n};\n","import React from 'react';\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\ninterface Props {\n  name: string;\n  email: string;\n  address: {\n    street: string;\n    city: string;\n    zipcode: string;\n  };\n}\nexport const User: React.FC<Props> = (props) => {\n  const { name, email, address } = props;\n  const { street, city, zipcode } = address;\n\n  return (\n    <Alert variant=\"standard\">\n      <AlertTitle>\n        <p>{name}</p>\n      </AlertTitle>\n      <p className=\"email\">{email}</p>\n      <hr />\n      <p>{street}</p>\n      <p>{city}</p>\n      <p>{zipcode}</p>\n    </Alert>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport { UserType, PostType, CommentType } from './types';\n\nimport { loadData } from './api';\nimport { User } from './components/User';\n\ninterface State {\n  setLoading: boolean;\n  setLoaded: boolean;\n  gotError: boolean;\n  error: string;\n  users: UserType[];\n  comments: CommentType[];\n  posts: PostType[];\n  preparedPosts: [];\n  filteredPosts: [];\n}\n\nconst initState: State = {\n  setLoading: false,\n  setLoaded: false,\n  gotError: false,\n  error: '',\n  comments: [],\n  users: [],\n  posts: [],\n  preparedPosts: [],\n  filteredPosts: [],\n};\n\nexport class App extends React.Component<{}, State> {\n  state = initState;\n\n  onLoading = (): void => {\n    this.setState((prevState) => ({\n      ...prevState,\n      setLoading: true,\n    }));\n\n    loadData()\n      .then(([users, posts, comments]) => {\n        this.setState((prevState: State) => ({\n          ...prevState,\n          setLoading: false,\n          setLoaded: true,\n          error: '',\n          gotError: false,\n          users,\n          comments,\n          posts,\n          preparedPosts: [],\n          filteredPosts: [],\n        }));\n\n        console.log(users);\n        console.log(posts);\n        console.log(comments);\n      })\n      .catch(error => {\n        this.setState(prevState => ({\n          ...prevState,\n          error: error.message,\n          gotError: true,\n        }));\n      });\n  };\n\n  render() {\n    const {\n      setLoading,\n      setLoaded,\n      users,\n      gotError,\n      error,\n    } = this.state;\n\n    return (\n      <>\n        <h1>Dynamic list of posts</h1>\n        {\n          (!setLoaded)\n            ? (\n              <>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  type=\"button\"\n                  onClick={this.onLoading}\n                  disabled={setLoading}\n                >\n                  {setLoading ? 'Loading...' : 'Load'}\n                </Button>\n                {gotError === true\n                && (\n                  <p>\n                    {error}\n                    {' '}\n                    <Button\n                      variant=\"outlined\"\n                      color=\"primary\"\n                      type=\"button\"\n                      onClick={this.onLoading}\n                    >\n                      Retry Loading\n                    </Button>\n                  </p>\n                )}\n              </>\n            ) : (\n              <p>\n                Application will be here\n                Debugging:\n                <ul>\n                  {users.map((user: UserType) => (\n                    <User\n                      name={user.name}\n                      email={user.email}\n                      address={user.address}\n                    />\n                  ))}\n                </ul>\n              </p>\n            )\n        }\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}